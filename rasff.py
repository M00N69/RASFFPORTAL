import streamlit as st
import pandas as pd
import plotly.express as px
import chardet
from Levenshtein import distance

st.set_page_config(
    page_title="Analyseur RASFF",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="auto"
)

def nettoyer_donnees(df):
    """Nettoie et standardise les donn√©es du DataFrame."""

    # 1. Normaliser les noms de pays et d'origine
    pays_standardises = {
        "France": "France",
        "United Kingdom": "Royaume-Uni",
        "T√ºrkiye": "Turquie",
        "Poland": "Pologne",
        "Netherlands": "Pays-Bas",
        "Italy": "Italie",
        "Germany": "Allemagne",
        "Spain": "Espagne",
        "Czech Republic": "R√©publique tch√®que",
        "Greece": "Gr√®ce",
        "Egypt": "√âgypte",
        "United States": "√âtats-Unis",
        # ... ajouter d'autres pays ici
    }
    df["notifying_country"] = df["notifying_country"].map(lambda x: pays_standardises.get(x, x))
    df["origin"] = df["origin"].map(lambda x: pays_standardises.get(x, x))

    # 2. Correction des noms de dangers (fuzzy matching)
    dangers_standardises = [
        "chlorpyrifos",
        "chlorpyrifos-ethyl",
        "Salmonella",
        "Salmonella spp.",
        "Salmonella Enteritidis",
        "Aflatoxin",
        "Aflatoxin B1",
        "aflatoxin total",
        "ochratoxin A",
        "E220- sulfur dioxide", 
        "cadmium",
        "Listeria monocytogenes",
        "norovirus",
        "peanut undeclared",
        "gluten too high content",
        # ... ajouter d'autres dangers ici
    ]

    def corriger_dangers(nom_danger):
        best_match = min(dangers_standardises, key=lambda x: distance(x, nom_danger))
        return best_match if distance(best_match, nom_danger) <= 3 else nom_danger

    df["hazards"] = df["hazards"].apply(corriger_dangers)

    # 3. Conversion des types de donn√©es
    df["date"] = pd.to_datetime(df["date"], format="%d-%m-%Y %H:%M:%S", errors='coerce')

    # 4. Gestion des valeurs manquantes
    df = df.fillna("")

    return df

def page_accueil():
    """Affiche la page d'accueil."""
    st.title("Analyseur de Donn√©es RASFF")
    st.markdown("## Bienvenue !")
    st.markdown(
        """
        Cet outil vous permet d'analyser les donn√©es du syst√®me RASFF (Rapid Alert System for Food and Feed). 
        Il vous offre des fonctionnalit√©s puissantes pour explorer les tendances, identifier les risques et 
        comprendre les probl√®mes de s√©curit√© alimentaire.
        """
    )

    st.markdown("## Fonctionnalit√©s")
    st.markdown(
        """
        * **T√©l√©chargement de fichier CSV :** Importez un fichier CSV contenant des donn√©es RASFF.
        * **Nettoyage des donn√©es :** L'outil nettoie et standardise les donn√©es pour une analyse plus pr√©cise.
        * **Statistiques descriptives :** Obtenez des informations cl√©s sur les donn√©es.
        * **Analyse de tendances :** Identifiez les tendances √©mergentes dans les notifications RASFF.
        * **Visualisations :** Visualisez les donn√©es √† l'aide de graphiques interactifs.
        * **Filtres et tri :** Filtrez et triez les donn√©es en fonction de crit√®res sp√©cifiques.
        * **Analyse de corr√©lation :** √âtudiez les relations entre les diff√©rentes variables des donn√©es.
        """
    )

    st.markdown("## Instructions")
    st.markdown(
        """
        1. T√©l√©chargez un fichier CSV contenant des donn√©es RASFF √† partir de la page "Analyse".
        2. S√©lectionnez les options d'analyse et de tri souhait√©es.
        3. Visualisez les r√©sultats et exportez les donn√©es si n√©cessaire.
        """
    )

def page_analyse():
    """Affiche la page d'analyse."""
    st.title("Analyse des Donn√©es RASFF")

    uploaded_file = st.file_uploader("T√©l√©chargez un fichier CSV RASFF", type=["csv"])

    if uploaded_file is not None:
        try:
            file_content = uploaded_file.read()
            encodage = chardet.detect(file_content)['encoding']
            uploaded_file.seek(0)

            df = pd.read_csv(uploaded_file, encoding=encodage, quotechar='"')
            df = nettoyer_donnees(df)

            st.markdown("## Options d'analyse et de tri")

            colonnes_a_afficher = st.multiselect("S√©lectionnez les colonnes √† afficher", df.columns)
            df_display = df[colonnes_a_afficher] if colonnes_a_afficher else df

            filtres = {}
            for colonne in df.columns:
                if df[colonne].dtype == "object":
                    options = df[colonne].unique()
                    filtre_colonne = st.multiselect(f"Filtrez {colonne}", options)
                    if filtre_colonne:
                        filtres[colonne] = filtre_colonne

            colonne_tri = st.selectbox("Trier par", df.columns)
            ordre_tri = st.radio("Ordre de tri", ("Croissant", "D√©croissant"))
            
            for colonne, valeurs in filtres.items():
                df_display = df_display[df_display[colonne].isin(valeurs)]

            if colonne_tri:
                df_display = df_display.sort_values(by=colonne_tri, ascending=(ordre_tri == "Croissant"))

            st.markdown("## Donn√©es analys√©es")
            st.dataframe(df_display)

            st.markdown("## Statistiques descriptives")
            st.write(df_display.describe())

            st.markdown("## Analyse de tendances")

            st.markdown("### Nombre de notifications par pays")
            fig_pays = px.bar(df_display, x="notifying_country", y="reference", title="Nombre de notifications par pays")
            st.plotly_chart(fig_pays, use_container_width=True)

            st.markdown("### Distribution des dangers")
            fig_dangers = px.histogram(df_display, x="hazards", title="Distribution des dangers")
            st.plotly_chart(fig_dangers, use_container_width=True)

            st.markdown("## Analyse de corr√©lation")
            
            colonnes_numeriques = df_display.select_dtypes(include=['float64', 'int64']).columns
            if len(colonnes_numeriques) > 1:
                st.markdown("### Matrice de corr√©lation")
                correlation_matrix = df_display[colonnes_numeriques].corr()
                fig_correlation = px.imshow(correlation_matrix, color_continuous_scale='RdBu_r', title="Matrice de corr√©lation")
                st.plotly_chart(fig_correlation, use_container_width=True)

                st.markdown("### Corr√©lation entre deux variables")
                colonne_x = st.selectbox("S√©lectionnez la premi√®re variable", colonnes_numeriques)
                colonne_y = st.selectbox("S√©lectionnez la deuxi√®me variable", colonnes_numeriques)
                fig_correlation_variables = px.scatter(df_display, x=colonne_x, y=colonne_y, title=f"Corr√©lation entre {colonne_x} et {colonne_y}")
                st.plotly_chart(fig_correlation_variables, use_container_width=True)
            else:
                st.warning("Pas assez de colonnes num√©riques pour l'analyse de corr√©lation.")

        except Exception as e:
            st.error(f"Erreur lors du chargement du fichier : {e}")

# Navigation
page = st.sidebar.radio("Navigation", ("Accueil", "Analyse"))

if page == "Accueil":
    page_accueil()
elif page == "Analyse":
    page_analyse()
