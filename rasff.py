import streamlit as st
import pandas as pd
import plotly.express as px
import chardet
import requests
from io import BytesIO
import openpyxl
from Levenshtein import distance
import datetime

st.set_page_config(
    page_title="Analyseur RASFF",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="auto"
)

def nettoyer_donnees(df):
    """Nettoie et standardise les donn√©es du DataFrame."""
    def normaliser_pays(nom_pays):
        """Normalise le nom d'un pays."""
        pays_standardises = {
            "France": "France",
            "United Kingdom": "Royaume-Uni",
            "T√ºrkiye": "Turquie",
            "Poland": "Pologne",
            "Netherlands": "Pays-Bas",
            "Italy": "Italie",
            "Germany": "Allemagne",
            "Spain": "Espagne",
            "Czech Republic": "R√©publique tch√®que",
            "Greece": "Gr√®ce",
            "Egypt": "√âgypte",
            "United States": "√âtats-Unis",
            # ... ajouter d'autres pays ici
        }
        return pays_standardises.get(nom_pays, nom_pays)

    df["notifying_country"] = df["notifying_country"].apply(normaliser_pays)
    df["origin"] = df["origin"].apply(normaliser_pays)

    def corriger_dangers(nom_danger):
        """Corrige les erreurs de frappe dans le nom d'un danger."""
        nom_danger = str(nom_danger)
        dangers_standardises = [
            "chlorpyrifos",
            "chlorpyrifos-ethyl",
            "Salmonella",
            "Salmonella spp.",
            "Salmonella Enteritidis",
            "Aflatoxin",
            "Aflatoxin B1",
            "aflatoxin total",
            "ochratoxin A",
            "E220- sulfur dioxide", 
            "cadmium",
            "Listeria monocytogenes",
            "norovirus",
            "peanut  undeclared",
            "gluten  too high content",
            # ... ajouter d'autres dangers ici
        ]
        best_match = min(dangers_standardises, key=lambda x: distance(x, nom_danger))
        if distance(best_match, nom_danger) <= 3:
            return best_match
        else:
            return nom_danger

    if "hazards" in df.columns:
        df["hazards"] = df.apply(lambda row: corriger_dangers(row['hazards']), axis=1)

    try:
        df["date"] = pd.to_datetime(df["date"], format="%d-%m-%Y %H:%M:%S")
    except ValueError:
        st.warning(f"Impossible de convertir la colonne 'date' en date.")
    df = df.fillna("")
    return df

def page_accueil():
    """Affiche la page d'accueil."""
    st.title("Analyseur de Donn√©es RASFF")
    st.markdown("## Bienvenue !")
    st.markdown(
        """
        Cet outil vous permet d'analyser les donn√©es du syst√®me RASFF (Rapid Alert System for Food and Feed). 
        Il vous offre des fonctionnalit√©s puissantes pour explorer les tendances, identifier les risques et 
        comprendre les probl√®mes de s√©curit√© alimentaire.
        """
    )
    st.markdown("## Fonctionnalit√©s")
    st.markdown(
        """
        * **T√©l√©chargement et analyse de donn√©es :** L'outil peut t√©l√©charger automatiquement les fichiers RASFF class√©s par semaine.
        * **Nettoyage automatique des donn√©es :** Les donn√©es sont nettoy√©es et standardis√©es pour assurer une analyse coh√©rente.
        * **Statistiques descriptives et visualisations :** Obtenez des informations cl√©s et visualisez les donn√©es via des graphiques interactifs.
        * **Analyse de tendances :** D√©couvrez les tendances √©mergentes dans les notifications RASFF.
        """
    )
    st.markdown("## Instructions")
    st.markdown(
        """
        1. S√©lectionnez l'ann√©e et les semaines que vous souhaitez analyser.
        2. Les donn√©es seront automatiquement t√©l√©charg√©es et analys√©es.
        3. Visualisez les r√©sultats et explorez les statistiques descriptives et les corr√©lations.
        """
    )

def telecharger_et_nettoyer_donnees(annee, semaines):
    """T√©l√©charge et combine les donn√©es de plusieurs semaines."""
    dfs = []
    url_template = "https://www.sirene-diffusion.fr/regia/000-rasff/{}/rasff-{}-{}.xls"
    
    for semaine in semaines:
        url = url_template.format(str(annee)[2:], annee, str(semaine).zfill(2))
        response = requests.get(url)
        if response.status_code == 200:
            df = pd.read_excel(BytesIO(response.content))
            dfs.append(df)
        else:
            st.error(f"√âchec du t√©l√©chargement des donn√©es pour la semaine {semaine}.")
    
    if dfs:
        df = pd.concat(dfs, ignore_index=True)
        df = nettoyer_donnees(df)
        return df
    else:
        return pd.DataFrame()  # Retourne un DataFrame vide si aucun fichier n'a pu √™tre t√©l√©charg√©

def page_analyse():
    """Affiche la page d'analyse."""
    st.title("Analyse des Donn√©es RASFF")

    # Formulaire pour saisir l'ann√©e et les semaines
    annee = st.number_input("Entrez l'ann√©e", min_value=2000, max_value=datetime.datetime.now().year, value=datetime.datetime.now().year)
    semaines = st.multiselect("S√©lectionnez les semaines", list(range(1, min(36, datetime.datetime.now().isocalendar()[1] + 1))), default=[35])

    if semaines:
        df = telecharger_et_nettoyer_donnees(annee, semaines)
        if not df.empty:
            # S√©lection automatique des colonnes n√©cessaires
            colonnes_a_afficher = ['notifying_country', 'reference', 'hazards', 'date'] if 'hazards' in df.columns else ['notifying_country', 'reference', 'date']
            df = df[colonnes_a_afficher]

            # Explication des donn√©es analys√©es
            st.markdown("## Donn√©es analys√©es")
            st.dataframe(df)
            st.markdown(
                """
                **Donn√©es analys√©es :**
                - `notifying_country` : Le pays ayant √©mis la notification.
                - `reference` : R√©f√©rence unique de chaque notification.
                - `hazards` : (si disponible) Type de danger rapport√© dans la notification.
                - `date` : Date de la notification.
                """
            )

            # Statistiques descriptives
            st.markdown("## Statistiques descriptives")
            st.write(df.describe(include='all'))

            # Analyse de tendances
            st.markdown("## Analyse de tendances")

            # Graphique √† barres (nombre de notifications par pays)
            st.markdown("### Nombre de notifications par pays")
            fig_pays = px.bar(df, x="notifying_country", y="reference", title="Nombre de notifications par pays", labels={'reference': 'Nombre de notifications'})
            st.plotly_chart(fig_pays, use_container_width=True)

            # Histogramme (distribution des dangers) si applicable
            if "hazards" in df.columns:
                st.markdown("### Distribution des dangers")
                fig_dangers = px.histogram(df, x="hazards", title="Distribution des dangers")
                st.plotly_chart(fig_dangers, use_container_width=True)

            # Analyse de corr√©lation
            if len(df.select_dtypes(include=["number"]).columns) > 1:
                st.markdown("## Analyse de corr√©lation")
                st.markdown("### Matrice de corr√©lation")
                correlation_matrix = df.corr()
                fig_correlation = px.imshow(correlation_matrix, color_continuous_scale='RdBu_r', title="Matrice de corr√©lation")
                st.plotly_chart(fig_correlation, use_container_width=True)

                # Graphique √† barres (corr√©lation entre deux variables)
                st.markdown("### Corr√©lation entre deux variables")
                colonne_x = st.selectbox("S√©lectionnez la premi√®re variable", df.columns)
                colonne_y = st.selectbox("S√©lectionnez la deuxi√®me variable", df.columns)
                fig_correlation_variables = px.bar(df, x=colonne_x, y=colonne_y, title=f"Corr√©lation entre {colonne_x} et {colonne_y}")
                st.plotly_chart(fig_correlation_variables, use_container_width=True)
        else:
            st.error("Aucune donn√©e disponible pour les semaines s√©lectionn√©es.")

# Navigation
page = st.sidebar.radio("Navigation", ("Accueil", "Analyse"))

if page == "Accueil":
    page_accueil()
elif page == "Analyse":
    page_analyse()
