import streamlit as st
import pandas as pd
import plotly.express as px
import chardet
import requests
from io import BytesIO
import openpyxl
from Levenshtein import distance
import datetime

st.set_page_config(
    page_title="Analyseur RASFF",
    page_icon="ðŸ“Š",
    layout="wide",
    initial_sidebar_state="auto"
)

def corriger_dangers(nom_danger):
    """Corrige les erreurs de frappe dans le nom d'un danger."""
    nom_danger = str(nom_danger)
    dangers_standardises = [
        "chlorpyrifos",
        "chlorpyrifos-ethyl",
        "Salmonella",
        "Salmonella spp.",
        "Salmonella Enteritidis",
        "Aflatoxin",
        "Aflatoxin B1",
        "aflatoxin total",
        "ochratoxin A",
        "E220- sulfur dioxide", 
        "cadmium",
        "Listeria monocytogenes",
        "norovirus",
        "peanut undeclared",
        "gluten too high content",
        # ... ajouter d'autres dangers ici
    ]
    best_match = min(dangers_standardises, key=lambda x: distance(x, nom_danger))
    if distance(best_match, nom_danger) <= 3:
        return best_match
    else:
        return nom_danger

def nettoyer_donnees(df):
    """Nettoie et standardise les donnÃ©es du DataFrame."""
    
    # Normaliser les noms de pays et d'origine
    def normaliser_pays(nom_pays):
        pays_standardises = {
            "France": "France",
            "United Kingdom": "Royaume-Uni",
            "TÃ¼rkiye": "Turquie",
            "Poland": "Pologne",
            "Netherlands": "Pays-Bas",
            "Italy": "Italie",
            "Germany": "Allemagne",
            "Spain": "Espagne",
            "Czech Republic": "RÃ©publique tchÃ¨que",
            "Greece": "GrÃ¨ce",
            "Egypt": "Ã‰gypte",
            "United States": "Ã‰tats-Unis",
            # ... ajouter d'autres pays ici
        }
        return pays_standardises.get(nom_pays, nom_pays)

    df["notifying_country"] = df["notifying_country"].apply(normaliser_pays)
    df["origin"] = df["origin"].apply(normaliser_pays)

    # Normaliser les catÃ©gories de produits
    def normaliser_categories_produits(categorie_produit):
        categories_produits_standardisees = {
            "alcoholic beverages": "Boissons alcoolisÃ©es",
            "animal by-products": "Sous-produits animaux",
            "bivalve molluscs and products thereof": "Mollusques bivalves et leurs produits",
            "cephalopods and products thereof": "CÃ©phalopodes et leurs produits",
            "cereals and bakery products": "CÃ©rÃ©ales et produits de boulangerie",
            "cocoa and cocoa preparations, coffee and tea": "Cacao et prÃ©parations de cacao, cafÃ© et thÃ©",
            "compound feeds": "Aliments composÃ©s",
            "confectionery": "Confiserie",
            "crustaceans and products thereof": "CrustacÃ©s et leurs produits",
            "dietetic foods, food supplements and fortified foods": "Aliments diÃ©tÃ©tiques, complÃ©ments alimentaires et aliments enrichis",
            "eggs and egg products": "Å’ufs et produits Ã  base d'Å“ufs",
            "fats and oils": "Graisses et huiles",
            "feed additives": "Additifs pour l'alimentation animale",
            "feed materials": "MatiÃ¨res premiÃ¨res pour aliments",
            "feed premixtures": "PrÃ©mÃ©langes pour aliments",
            "fish and fish products": "Poissons et produits Ã  base de poissons",
            "food additives and flavourings": "Additifs alimentaires et arÃ´mes",
            "food contact materials": "MatÃ©riaux en contact avec les aliments",
            "fruits and vegetables": "Fruits et lÃ©gumes",
            "gastropods": "GastÃ©ropodes",
            "herbs and spices": "Herbes et Ã©pices",
            "honey and royal jelly": "Miel et gelÃ©e royale",
            "ices and desserts": "Glaces et desserts",
            "live animals": "Animaux vivants",
            "meat and meat products (other than poultry)": "Viande et produits carnÃ©s (autres que volaille)",
            "milk and milk products": "Lait et produits laitiers",
            "natural mineral waters": "Eaux minÃ©rales naturelles",
            "non-alcoholic beverages": "Boissons non alcoolisÃ©es",
            "nuts, nut products and seeds": "Noix, produits Ã  base de noix et graines",
            "other food product / mixed": "Autres produits alimentaires / mixtes",
            "pet food": "Aliments pour animaux de compagnie",
            "plant protection products": "Produits de protection des plantes",
            "poultry meat and poultry meat products": "Viande de volaille et produits Ã  base de viande de volaille",
            "prepared dishes and snacks": "Plats prÃ©parÃ©s et snacks",
            "soups, broths, sauces and condiments": "Soupes, bouillons, sauces et condiments",
            "water for human consumption (other)": "Eau pour la consommation humaine (autres)",
            "wine": "Vin",
        }
        return categories_produits_standardisees.get(categorie_produit, categorie_produit)
    
    df["category"] = df["category"].apply(normaliser_categories_produits)

    # Normaliser les catÃ©gories de dangers
    def normaliser_categories_dangers(categorie_danger):
        categories_dangers_standardisees = {
            "GMO / novel food": "OGM / nouveau aliment",
            "TSEs": "EST",
            "adulteration / fraud": "AdultÃ©ration / fraude",
            "allergens": "AllergÃ¨nes",
            "biological contaminants": "Contaminants biologiques",
            "biotoxins (other)": "Biotoxines (autres)",
            "chemical contamination (other)": "Contamination chimique (autres)",
            "composition": "Composition",
            "environmental pollutants": "Polluants environnementaux",
            "feed additives": "Additifs pour l'alimentation animale",
            "food additives and flavourings": "Additifs alimentaires et arÃ´mes",
            "foreign bodies": "Corps Ã©trangers",
            "genetically modified": "GÃ©nÃ©tiquement modifiÃ©",
            "heavy metals": "MÃ©taux lourds",
            "industrial contaminants": "Contaminants industriels",
            "labelling absent/incomplete/incorrect": "Ã‰tiquetage absent/incomplet/incorrect",
            "migration": "Migration",
            "mycotoxins": "Mycotoxines",
            "natural toxins (other)": "Toxines naturelles (autres)",
            "non-pathogenic micro-organisms": "Micro-organismes non pathogÃ¨nes",
            "not determined (other)": "Non dÃ©terminÃ© (autres)",
            "novel food": "Nouveau aliment",
            "organoleptic aspects": "Aspects organoleptiques",
            "packaging defective / incorrect": "Emballage dÃ©fectueux / incorrect",
            "parasitic infestation": "Infestation parasitaire",
            "pathogenic micro-organisms": "Micro-organismes pathogÃ¨nes",
            "pesticide residues": "RÃ©sidus de pesticides",
            "poor or insufficient controls": "ContrÃ´les insuffisants ou de mauvaise qualitÃ©",
            "radiation": "Radiation",
            "residues of veterinary medicinal": "RÃ©sidus de mÃ©dicaments vÃ©tÃ©rinaires",
        }
        return categories_dangers_standardisees.get(categorie_danger, categorie_danger)
    
    df["hazards"] = df["hazards"].apply(normaliser_categories_dangers)

    # Appliquer la correction des dangers avec Levenshtein
    if "hazards" in df.columns:
        df["hazards"] = df.apply(lambda row: corriger_dangers(row['hazards']), axis=1)

    # Conversion des dates
    try:
        df["date"] = pd.to_datetime(df["date"], format="%d-%m-%Y %H:%M:%S")
    except ValueError:
        st.warning(f"Impossible de convertir la colonne 'date' en date.")
    df = df.fillna("")
    return df

def page_accueil():
    """Affiche la page d'accueil."""
    st.title("Analyseur de DonnÃ©es RASFF")
    st.markdown("## Bienvenue !")
    st.markdown(
        """
        Cet outil vous permet d'analyser les donnÃ©es du systÃ¨me RASFF (Rapid Alert System for Food and Feed). 
        Il vous offre des fonctionnalitÃ©s puissantes pour explorer les tendances, identifier les risques et 
        comprendre les problÃ¨mes de sÃ©curitÃ© alimentaire.
        """
    )
    st.markdown("## FonctionnalitÃ©s")
    st.markdown(
        """
        * **TÃ©lÃ©chargement et analyse de donnÃ©es :** L'outil peut tÃ©lÃ©charger automatiquement les fichiers RASFF classÃ©s par semaine.
        * **Nettoyage automatique des donnÃ©es :** Les donnÃ©es sont nettoyÃ©es et standardisÃ©es pour assurer une analyse cohÃ©rente.
        * **Statistiques descriptives et visualisations :** Obtenez des informations clÃ©s et visualisez les donnÃ©es via des graphiques interactifs.
        * **Analyse de tendances :** DÃ©couvrez les tendances Ã©mergentes dans les notifications RASFF.
        """
    )
    st.markdown("## Instructions")
    st.markdown(
        """
        1. SÃ©lectionnez l'annÃ©e et les semaines que vous souhaitez analyser.
        2. Les donnÃ©es seront automatiquement tÃ©lÃ©chargÃ©es et analysÃ©es.
        3. Visualisez les rÃ©sultats et explorez les statistiques descriptives et les corrÃ©lations.
        """
    )

def telecharger_et_nettoyer_donnees(annee, semaines):
    """TÃ©lÃ©charge et combine les donnÃ©es de plusieurs semaines."""
    dfs = []
    url_template = "https://www.sirene-diffusion.fr/regia/000-rasff/{}/rasff-{}-{}.xls"
    
    for semaine in semaines:
        url = url_template.format(str(annee)[2:], annee, str(semaine).zfill(2))
        response = requests.get(url)
        if response.status_code == 200:
            df = pd.read_excel(BytesIO(response.content))
            dfs.append(df)
        else:
            st.error(f"Ã‰chec du tÃ©lÃ©chargement des donnÃ©es pour la semaine {semaine}.")
    
    if dfs:
        df = pd.concat(dfs, ignore_index=True)
        df = nettoyer_donnees(df)
        return df
    else:
        return pd.DataFrame()  # Retourne un DataFrame vide si aucun fichier n'a pu Ãªtre tÃ©lÃ©chargÃ©

def calculer_statistiques_descriptives(df):
    """Calcule les statistiques descriptives pour le nombre de notifications par pays et par type de danger."""
    # Groupement par pays et par danger
    grouped = df.groupby(['notifying_country', 'hazards']).size().reset_index(name='Nombre de notifications')
    
    # Calcul des statistiques descriptives
    stats = grouped['Nombre de notifications'].describe()
    return stats, grouped

def page_analyse():
    """Affiche la page d'analyse."""
    st.title("Analyse des DonnÃ©es RASFF")

    # Formulaire pour saisir l'annÃ©e et les semaines
    annee = st.number_input("Entrez l'annÃ©e", min_value=2000, max_value=datetime.datetime.now().year, value=datetime.datetime.now().year)
    semaines = st.multiselect("SÃ©lectionnez les semaines", list(range(1, min(36, datetime.datetime.now().isocalendar()[1] + 1))), default=[35])

    if semaines:
        df = telecharger_et_nettoyer_donnees(annee, semaines)
        if not df.empty:
            # SÃ©lection automatique des colonnes nÃ©cessaires
            colonnes_a_afficher = ['notifying_country', 'category', 'hazards', 'date'] if 'hazards' in df.columns else ['notifying_country', 'category', 'date']
            df = df[colonnes_a_afficher]

            # Calculer les statistiques descriptives sur le nombre de notifications par pays et type de danger
            stats, grouped = calculer_statistiques_descriptives(df)

            # Explication des donnÃ©es analysÃ©es
            st.markdown("## DonnÃ©es analysÃ©es")
            st.dataframe(df)
            st.markdown(
                """
                **DonnÃ©es analysÃ©es :**
                - `notifying_country` : Le pays ayant Ã©mis la notification.
                - `category` : CatÃ©gorie du produit ou matÃ©riel concernÃ© par la notification.
                - `hazards` : (si disponible) CatÃ©gorie du danger rapportÃ© dans la notification.
                - `date` : Date de la notification.
                """
            )

            # Statistiques descriptives
            st.markdown("## Statistiques descriptives sur les notifications")
            st.write(stats)

            # Afficher le nombre de notifications par pays et type de danger
            st.markdown("### Nombre de notifications par pays et type de danger")
            st.dataframe(grouped)

            # Analyse de tendances
            st.markdown("## Analyse de tendances")

            # Graphique Ã  barres (nombre de notifications par pays)
            st.markdown("### Nombre de notifications par pays")
            fig_pays = px.bar(grouped, x="notifying_country", y="Nombre de notifications", title="Nombre de notifications par pays")
            st.plotly_chart(fig_pays, use_container_width=True)

            # Histogramme (distribution des dangers) si applicable
            if "hazards" in df.columns:
                st.markdown("### Distribution des dangers")
                fig_dangers = px.histogram(grouped, x="hazards", y="Nombre de notifications", title="Distribution des dangers")
                st.plotly_chart(fig_dangers, use_container_width=True)

        else:
            st.error("Aucune donnÃ©e disponible pour les semaines sÃ©lectionnÃ©es.")

# Navigation
page = st.sidebar.radio("Navigation", ("Accueil", "Analyse"))

if page == "Accueil":
    page_accueil()
elif page == "Analyse":
    page_analyse()
