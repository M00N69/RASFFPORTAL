import streamlit as st
import pandas as pd
import plotly.express as px
import chardet
import requests
from io import BytesIO
import openpyxl
from Levenshtein import distance
import datetime

# Importer les listes depuis les fichiers sÃ©parÃ©s
from product_categories import product_categories
from hazards import hazards
from hazard_categories import hazard_categories
from notifying_countries import notifying_countries
from origin_countries import origin_countries

st.set_page_config(
    page_title="Analyseur RASFF",
    page_icon="ðŸ“Š",
    layout="wide",
    initial_sidebar_state="auto"
)

def corriger_dangers(nom_danger):
    """Corrige les erreurs de frappe dans le nom d'un danger."""
    nom_danger = str(nom_danger)
    best_match = min(hazards, key=lambda x: distance(x, nom_danger))
    if distance(best_match, nom_danger) <= 3:
        return best_match
    else:
        return nom_danger

def mapper_danger_a_categorie(danger):
    """Mappe un danger Ã  sa catÃ©gorie de danger correspondante."""
    for categorie, description in hazard_categories.items():
        if description.lower() in danger.lower():
            return categorie
    return "Autre"  # Si aucun match n'est trouvÃ©

def nettoyer_donnees(df):
    """Nettoie et standardise les donnÃ©es du DataFrame."""
    
    # Normaliser les noms de pays et d'origine
    df["notifying_country"] = df["notifying_country"].apply(lambda x: x if x in notifying_countries else x)
    df["origin"] = df["origin"].apply(lambda x: x if x in origin_countries else x)

    # Normaliser les catÃ©gories de produits
    df["category"] = df["category"].apply(lambda x: product_categories.get(x, x))

    # Corriger et mapper les dangers Ã  leurs catÃ©gories
    if "hazards" in df.columns:
        df["hazards"] = df["hazards"].apply(corriger_dangers)
        df["hazard_category"] = df["hazards"].apply(mapper_danger_a_categorie)

    # Conversion des dates
    try:
        df["date"] = pd.to_datetime(df["date"], format="%d-%m-%Y %H:%M:%S")
    except ValueError:
        st.warning(f"Impossible de convertir la colonne 'date' en date.")
    df = df.fillna("")
    return df

def telecharger_et_nettoyer_donnees(annee, semaines):
    """TÃ©lÃ©charge et combine les donnÃ©es de plusieurs semaines."""
    dfs = []
    url_template = "https://www.sirene-diffusion.fr/regia/000-rasff/{}/rasff-{}-{}.xls"
    
    for semaine in semaines:
        url = url_template.format(str(annee)[2:], annee, str(semaine).zfill(2))
        response = requests.get(url)
        if response.status_code == 200:
            df = pd.read_excel(BytesIO(response.content))
            dfs.append(df)
        else:
            st.error(f"Ã‰chec du tÃ©lÃ©chargement des donnÃ©es pour la semaine {semaine}.")
    
    if dfs:
        df = pd.concat(dfs, ignore_index=True)
        df = nettoyer_donnees(df)
        return df
    else:
        return pd.DataFrame()  # Retourne un DataFrame vide si aucun fichier n'a pu Ãªtre tÃ©lÃ©chargÃ©

def calculer_statistiques_descriptives(df):
    """Calcule les statistiques descriptives pour le nombre de notifications par pays et par type de danger."""
    # Groupement par pays et par danger
    grouped = df.groupby(['notifying_country', 'hazard_category']).size().reset_index(name='Nombre de notifications')
    
    # Calcul des statistiques descriptives
    stats = grouped['Nombre de notifications'].describe()
    return stats, grouped

def page_accueil():
    """Affiche la page d'accueil."""
    st.title("Analyseur de DonnÃ©es RASFF")
    st.markdown("## Bienvenue !")
    st.markdown(
        """
        Cet outil vous permet d'analyser les donnÃ©es du systÃ¨me RASFF (Rapid Alert System for Food and Feed). 
        Il vous offre des fonctionnalitÃ©s puissantes pour explorer les tendances, identifier les risques et 
        comprendre les problÃ¨mes de sÃ©curitÃ© alimentaire.
        """
    )
    st.markdown("## FonctionnalitÃ©s")
    st.markdown(
        """
        * **TÃ©lÃ©chargement et analyse de donnÃ©es :** L'outil peut tÃ©lÃ©charger automatiquement les fichiers RASFF classÃ©s par semaine.
        * **Nettoyage automatique des donnÃ©es :** Les donnÃ©es sont nettoyÃ©es et standardisÃ©es pour assurer une analyse cohÃ©rente.
        * **Statistiques descriptives et visualisations :** Obtenez des informations clÃ©s et visualisez les donnÃ©es via des graphiques interactifs.
        * **Analyse de tendances :** DÃ©couvrez les tendances Ã©mergentes dans les notifications RASFF.
        """
    )
    st.markdown("## Instructions")
    st.markdown(
        """
        1. SÃ©lectionnez l'annÃ©e et les semaines que vous souhaitez analyser.
        2. Les donnÃ©es seront automatiquement tÃ©lÃ©chargÃ©es et analysÃ©es.
        3. Visualisez les rÃ©sultats et explorez les statistiques descriptives et les corrÃ©lations.
        """
    )

def page_analyse():
    """Affiche la page d'analyse."""
    st.title("Analyse des DonnÃ©es RASFF")

    # Formulaire pour saisir l'annÃ©e et les semaines
    annee = st.number_input("Entrez l'annÃ©e", min_value=2000, max_value=datetime.datetime.now().year, value=datetime.datetime.now().year)
    semaines = st.multiselect("SÃ©lectionnez les semaines", list(range(1, min(36, datetime.datetime.now().isocalendar()[1] + 1))), default=[35])

    if semaines:
        df = telecharger_et_nettoyer_donnees(annee, semaines)
        if not df.empty:
            # SÃ©lection automatique des colonnes nÃ©cessaires
            colonnes_a_afficher = ['notifying_country', 'category', 'hazard_category', 'date'] if 'hazard_category' in df.columns else ['notifying_country', 'category', 'date']
            df = df[colonnes_a_afficher]

            # **Nouveau** : Filtrer par catÃ©gorie de dangers
            categories_dangers_selectionnees = st.multiselect("Filtrez par catÃ©gories de dangers", df['hazard_category'].unique())
            if categories_dangers_selectionnees:
                df = df[df['hazard_category'].isin(categories_dangers_selectionnees)]

            # Calculer les statistiques descriptives sur le nombre de notifications par pays et type de danger
            stats, grouped = calculer_statistiques_descriptives(df)

            # Explication des donnÃ©es analysÃ©es
            st.markdown("## DonnÃ©es analysÃ©es")
            st.dataframe(df)
            st.markdown(
                """
                **DonnÃ©es analysÃ©es :**
                - `notifying_country` : Le pays ayant Ã©mis la notification.
                - `category` : CatÃ©gorie du produit ou matÃ©riel concernÃ© par la notification.
                - `hazard_category` : CatÃ©gorie de danger associÃ©e au danger rapportÃ©.
                - `date` : Date de la notification.
                """
            )

            # Statistiques descriptives
            st.markdown("## Statistiques descriptives sur les notifications")
            st.write(stats)

            # Afficher le nombre de notifications par pays et type de danger
            st.markdown("### Nombre de notifications par pays et type de danger")
            st.dataframe(grouped)

            # Analyse de tendances
            st.markdown("## Analyse de tendances")

            # Graphique Ã  barres (nombre de notifications par pays)
            st.markdown("### Nombre de notifications par pays")
            fig_pays = px.bar(grouped, x="notifying_country", y="Nombre de notifications", title="Nombre de notifications par pays")
            st.plotly_chart(fig_pays, use_container_width=True)

            # Histogramme (distribution des dangers) si applicable
            if "hazard_category" in df.columns:
                st.markdown("### Distribution des catÃ©gories de dangers")
                fig_dangers = px.histogram(grouped, x="hazard_category", y="Nombre de notifications", title="Distribution des catÃ©gories de dangers")
                st.plotly_chart(fig_dangers, use_container_width=True)

            # **Nouveau** : Diagramme camembert sur les catÃ©gories de produits
            st.markdown("### RÃ©partition des notifications par catÃ©gories de produits")
            fig_pie = px.pie(df, names='category', title="RÃ©partition des notifications par catÃ©gories de produits")
            st.plotly_chart(fig_pie, use_container_width=True)

        else:
            st.error("Aucune donnÃ©e disponible pour les semaines sÃ©lectionnÃ©es.")

# Navigation
page = st.sidebar.radio("Navigation", ("Accueil", "Analyse"))

if page == "Accueil":
    page_accueil()
elif page == "Analyse":
    page_analyse()
